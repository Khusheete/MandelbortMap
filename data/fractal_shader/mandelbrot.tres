[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform highp vec4 bounds = vec4(-2.0, -1.25, 0.5, 1.25);
uniform int max_iter = 100;

vec2 cmult(highp vec2 v0, highp vec2 v1) {
	return vec2(v0.x * v1.x - v0.y * v1.y, v0.x * v1.y + v0.y * v1.x);
}

//returns the number of iterations until it is outside of the mandelbrot set
//or -1 if the point is inside
int mandelbrot(highp vec2 c) {
	highp vec2 z = vec2(0.0);
	for (int i = 0; i < max_iter; i++) {
		z = cmult(z, z) + c;
		if (length(z) >= 2.0) {
			return i;
		}
	}
	return -1;
}

void fragment() {
	highp vec2 c = mix(bounds.xy, bounds.zw, UV);
	
	int mbt = mandelbrot(c);
	
	if (mbt == -1) {
		COLOR = vec4(0.0, 0.0, 0.0, 1.0);
	} else {
		highp float scale = float(max_iter - mbt) / float(max_iter);
		COLOR = vec4(vec3(scale), 1.0);
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/bounds = Plane( -2, -1.25, 0.5, 1.25 )
shader_param/max_iter = 100
